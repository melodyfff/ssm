<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="
			http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans.xsd
			 http://www.springframework.org/schema/security
			 http://www.springframework.org/schema/security/spring-security.xsd
			">

    <!--  Spring-Security 的配置 -->
    <security:http auto-config="true" use-expressions="true" >
        <security:csrf disabled="true"/>
        <security:intercept-url pattern="/security/login" access="permitAll"/>
        <!-- <security:intercept-url pattern="/mypermission" access="hasRole('ROLE_USER')"/>  -->
        <security:intercept-url pattern="/security/admin" access="hasRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/security/common" access="hasRole('ROLE_USER')"/>

        <security:access-denied-handler error-page="/security/denied"/>

        <security:form-login
                login-page="/security/login"
                authentication-failure-url="/security/login?error=true"
                login-processing-url="/security/security_check"
                default-target-url="/security/common"/>

        <security:logout
                invalidate-session="true"
                logout-success-url="/security/login"
                logout-url="/security/logout"/>
    </security:http>


    <!-- 指定一个自定义的authentication-manager :customUserDetailsService -->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="customUserDetailsService">
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- 对密码进行MD5编码 -->
    <bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>

    <!--
        通过 customUserDetailsService,Spring会自动的用户的访问级别.
        也可以理解成:以后我们和数据库操作就是通过customUserDetailsService来进行关联.
     -->
    <bean id="customUserDetailsService" class="com.xinchen.ssm.demo.security.CustomUserDetailsService"/>
</beans>